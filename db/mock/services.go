// Code generated by MockGen. DO NOT EDIT.
// Source: url-shortener/db/service (interfaces: DBService)
//
// Generated by this command:
//
//	mockgen -package mockdb -destination db/mock/services.go url-shortener/db/service DBService
//

// Package mockdb is a generated GoMock package.
package mockdb

import (
	reflect "reflect"
	service "url-shortener/db/service"

	gomock "go.uber.org/mock/gomock"
)

// MockDBService is a mock of DBService interface.
type MockDBService struct {
	ctrl     *gomock.Controller
	recorder *MockDBServiceMockRecorder
}

// MockDBServiceMockRecorder is the mock recorder for MockDBService.
type MockDBServiceMockRecorder struct {
	mock *MockDBService
}

// NewMockDBService creates a new mock instance.
func NewMockDBService(ctrl *gomock.Controller) *MockDBService {
	mock := &MockDBService{ctrl: ctrl}
	mock.recorder = &MockDBServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBService) EXPECT() *MockDBServiceMockRecorder {
	return m.recorder
}

// SaveUrl mocks base method.
func (m *MockDBService) SaveUrl(arg0 *service.SaveUrlRequest) (*service.SaveUrlResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUrl", arg0)
	ret0, _ := ret[0].(*service.SaveUrlResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveUrl indicates an expected call of SaveUrl.
func (mr *MockDBServiceMockRecorder) SaveUrl(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUrl", reflect.TypeOf((*MockDBService)(nil).SaveUrl), arg0)
}
